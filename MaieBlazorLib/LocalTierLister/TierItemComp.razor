@using Microsoft.Extensions.Logging
@using System.Globalization
@using MudBlazor
@implements IDisposable
@inject ILogger<TierItemComp> Logger
@inject IJSRuntime JSRuntime

<a class="clickable" draggable="true" @ondragover="OverHere" @ondragleave="OuttaHere" @onmousedown="(e) => StartDrag(e)" @ondragend="StopDrag">
	@if (item.img == "" || NoImage)
	{
		<p class="@(isminimal ? "tieritemsmall": "tieritem") rounded d-flex flex-column flex-fill flex-shrink-1 justify-content-center m-1 text-wrap text-center" style="@GetFontSize(item.name)">@item.name</p>
	}
	else
	{
		<img src="@item.img" draggable="false" alt="@item.name" class="@(isminimal ? "tieritemsmall": "tieritem") rounded flex-fill m-1" @onerror="ImageFail"/>
	}
</a>
<script src="imageHandler.js"></script>

@code {
	[Parameter]
	public TierItem item { get; set; }

	[Parameter]
	public int id { get; set; }

	[Parameter]
	public bool isminimal { get; set; }

	[Parameter]
	public bool NoImage { get; set; }

	[Parameter]
	public EventCallback<TierItem> OnItemSelect { get; set; }
	[Parameter]
	public EventCallback<TierItem> OnItemDrag { get; set; }
	[Parameter]
	public EventCallback OnItemDragStop { get; set; }
	[Parameter]
	public EventCallback<int> OnItemOver { get; set; }
	[Parameter]
	public EventCallback OnItemOut { get; set; }

	bool imageLoaded = true;

	void ImageFail()
	{
		imageLoaded = false;
	}

	void Select(MouseEventArgs e)
	{
		if (e.Buttons == 2) // right click
			OnItemSelect.InvokeAsync(item);
	}

	string GetFontSize(string name)
	{
		double size;
		if (true)//(name.Length > 12)
		{
			size = (1 - (((double)name.Length + 50) / (name.Length + 100))) * 50;
		}
		else
		{
			size = 27;
		}
		if (isminimal)
			size *= 0.7;
		return $"font-size: {size.ToString("F2", CultureInfo.InvariantCulture)}px";
	}

	void StartDrag(MouseEventArgs e) // Characacter Draggin'
	{
		Logger.LogInformation($"Started drag with {item.name} from tier {item.parent.ogname}! {e.Button}");
		if (e.Buttons == 2) // right click
			OnItemSelect.InvokeAsync(item);
		else
		{
			OnItemDrag.InvokeAsync(item);
		}
	}

	void StopDrag(MouseEventArgs e)
	{
		Logger.LogInformation($"Stopped drag!");
		OnItemDragStop.InvokeAsync();
	}

	async void OverHere()
	{
		await OnItemOver.InvokeAsync(id);
	}

	void OuttaHere(MouseEventArgs e)
	{
		OnItemOut.InvokeAsync();
	}

	public void Dispose()
	{
		item = null;
	}
}
